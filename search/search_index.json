{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"arch/architecture/","title":"Ranger Architecture","text":""},{"location":"blog/blog/","title":"Welcome to Blogs!","text":"<ul> <li> <p>Apache Ranger Policy Model</p> </li> <li> <p>Adventures in attribute-based access control (ABAC) - Vol 1</p> </li> <li> <p>Adventures in attribute-based access control (ABAC) - Vol 2</p> </li> <li> <p>Dynamic Expressions</p> </li> </ul>"},{"location":"gds/gds_intro/","title":"Governed Data Sharing","text":""},{"location":"gds/gds_intro/#what-is-a-datashare","title":"What is a DataShare?","text":""},{"location":"gds/gds_intro/#what-is-a-dataset","title":"What is a DataSet?","text":""},{"location":"getting-started/install/","title":"Installation","text":"<p>Tip</p> <p>If you don't have prior experience with Python, we recommend reading Using Python's pip to Manage Your Projects' Dependencies, which is a really good introduction on the mechanics of Python package management and helps you troubleshoot if you run into errors.</p>"},{"location":"getting-started/install/#with-docker","title":"with docker recommended","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> Latest2.7 <pre><code>docker pull apache/ranger\ndocker pull apache/ranger-db\ndocker pull apache/ranger-solr\ndocker pull apache/ranger-zk\n</code></pre> <pre><code>docker pull apache/ranger:2.7.0\ndocker pull apache/ranger-db:2.7.0\ndocker pull apache/ranger-solr:2.7.0\ndocker pull apache/ranger-zk:2.7.0\n</code></pre> Warning <p>The Docker container is intended for local previewing purposes only and is not suitable for deployment. This is because the web server used by MkDocs for live previews is not designed for production use and may have security vulnerabilities.</p>"},{"location":"home/overview/","title":"Overview","text":"<p>Apache Ranger\u2122 is a framework to enable, monitor and manage comprehensive data security across various data processing services.</p>"},{"location":"home/overview/#goals-overview","title":"Goals Overview","text":"<ul> <li>Centralized security administration to manage all authorization related tasks in a central UI or using REST APIs.</li> <li>Fine grained authorization to do a specific action and/or operation with 20+ data processing services and managed through a central administration tool.</li> <li>Standardized authorization method across different data processing services.</li> <li> <p>Enhanced support for different authorization methods like:</p> <ul> <li>Role based access control (RBAC)</li> <li>Attribute based access control (ABAC)</li> <li>Tag based access control (TBAC)</li> </ul> </li> <li> <p>Centralized auditing of user access and administrative actions (security related) for all services.</p> </li> </ul>"},{"location":"plugins/trino/","title":"Trino with Ranger","text":"<p>Ranger plugin for Trino uses Ranger policies to authorize data access to catalogs, scheams, tables, and columns in Trino.The plugin supports fine-grained features like  column-masking, row-filtering along with audit logging.</p> <p>For more details check: https://trino.io/docs/current/security/ranger-access-control.html</p>"},{"location":"sec-zone/apis/","title":"APIs","text":""},{"location":"sec-zone/apis/#zone-management","title":"Zone Management","text":""},{"location":"sec-zone/apis/#policy-management","title":"Policy Management","text":""},{"location":"sec-zone/apis/#audits","title":"Audits","text":""},{"location":"sec-zone/intro/","title":"Introduction","text":""},{"location":"sec-zone/intro/#what-is-a-security-zone","title":"What is a Security Zone ?","text":"<p>A security zone consists of set of resources from one or more services. Here are a few examples of security zones:</p>"},{"location":"sec-zone/intro/#zone-finance","title":"Zone: <code>finance</code>","text":"<pre><code> service: prod_hadoop; path=/finance/*, /taxes/*  \n service: prod_hive; database=finance  \n service: prod_kafka; topic=FIN_*  \n service: test_hadoop; path=/finance/*, /taxes/*  \n</code></pre>"},{"location":"sec-zone/intro/#zone-sales","title":"Zone: <code>sales</code>","text":"<pre><code> service: prod_hadoop; path=/sales/*  \n service: prod_hive; database=sales  \n service: prod_kafka; topic=SALES_*  \n</code></pre> <p>As can be seen above, the resources can be specified using wildcards - like <code>FIN_*</code>, <code>SALES_*</code>.</p> <p>It is critical that a resource be not mappable to more than one zone. Ranger would not allow creation of zones that specify resources that match for resources of another zone. For example, attempt to update finance zone above with HDFS path <code>/sales/finance/*</code> will not be permitted, as this conflicts with HDFS path specified in sales zone - <code>/sales/*</code>.</p>"},{"location":"sec-zone/intro/#administration","title":"Administration","text":"<p>A set of users and groups can be designated as administrators of a security zone. These users can create/update/delete security policies for the resources in the zone.  </p>"},{"location":"sec-zone/intro/#audits","title":"Audits","text":"<p>A set of users and groups can be authorized to view audit logs of access to zone\u2019s resources. Other users will not be allowed to view access-audit logs of resources of the zone.  </p>"},{"location":"services/admin/service/","title":"Ranger Admin","text":""},{"location":"services/kms/service/","title":"Ranger KMS","text":""},{"location":"services/tagsync/service/","title":"Ranger TagSync","text":""},{"location":"services/usersync/service/","title":"Ranger UserSync","text":""}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Goals Overview","text":"<ul> <li>Centralized security administration to manage all authorization related tasks in a central UI or using REST APIs.</li> <li>Fine-grained authorization to do a specific action and/or operation with 20+ data processing services and managed through a central administration tool.</li> <li>Standardized authorization method across different data processing services.</li> <li>Enhanced support for different authorization methods like:<ul> <li>Role based access control (RBAC)</li> <li>Attribute based access control (ABAC)</li> <li>Tag based access control (TBAC)</li> </ul> </li> <li>Centralized auditing of user access and administrative actions (security related) for all services.</li> </ul>"},{"location":"arch/architecture/","title":"Ranger Architecture","text":""},{"location":"blog/blog/","title":"Welcome to Blogs!","text":"<ul> <li> <p>Apache Ranger Policy Model</p> </li> <li> <p>Adventures in attribute-based access control (ABAC) - Vol 1</p> </li> <li> <p>Adventures in attribute-based access control (ABAC) - Vol 2</p> </li> <li> <p>Dynamic Expressions</p> </li> </ul>"},{"location":"features/client-interface/intro/","title":"Ranger Client Libraries","text":""},{"location":"features/client-interface/intro/#introduction","title":"Introduction","text":"<p>Ranger provides client libraries in Java and Python to access Ranger REST APIs programmatically with ease.</p>"},{"location":"features/client-interface/intro/#python","title":"Python","text":"<p>For more details, please refer to Ranger Python Client Library.</p>"},{"location":"features/client-interface/intro/#java","title":"Java","text":""},{"location":"features/gds/gds_intro/","title":"Governed Data Sharing","text":""},{"location":"features/gds/gds_intro/#what-is-a-datashare","title":"What is a DataShare?","text":""},{"location":"features/gds/gds_intro/#what-is-a-dataset","title":"What is a DataSet?","text":""},{"location":"features/sec-zone/apis/","title":"APIs","text":""},{"location":"features/sec-zone/apis/#zone-management","title":"Zone Management","text":""},{"location":"features/sec-zone/apis/#policy-management","title":"Policy Management","text":""},{"location":"features/sec-zone/apis/#audits","title":"Audits","text":""},{"location":"features/sec-zone/intro/","title":"Introduction","text":""},{"location":"features/sec-zone/intro/#what-is-a-security-zone","title":"What is a Security Zone ?","text":"<p>A security zone consists of set of resources from one or more services. Here are a few examples of security zones:</p>"},{"location":"features/sec-zone/intro/#zone-finance","title":"Zone: <code>finance</code>","text":"<pre><code> service: prod_hadoop; path=/finance/*, /taxes/*  \n service: prod_hive; database=finance  \n service: prod_kafka; topic=FIN_*  \n service: test_hadoop; path=/finance/*, /taxes/*  \n</code></pre>"},{"location":"features/sec-zone/intro/#zone-sales","title":"Zone: <code>sales</code>","text":"<pre><code> service: prod_hadoop; path=/sales/*  \n service: prod_hive; database=sales  \n service: prod_kafka; topic=SALES_*  \n</code></pre> <p>As can be seen above, the resources can be specified using wildcards - like <code>FIN_*</code>, <code>SALES_*</code>.</p> <p>It is critical that a resource be not mappable to more than one zone. Ranger would not allow creation of zones that specify resources that match for resources of another zone. For example, attempt to update finance zone above with HDFS path <code>/sales/finance/*</code> will not be permitted, as this conflicts with HDFS path specified in sales zone - <code>/sales/*</code>.</p>"},{"location":"features/sec-zone/intro/#administration","title":"Administration","text":"<p>A set of users and groups can be designated as administrators of a security zone. These users can create/update/delete security policies for the resources in the zone.  </p>"},{"location":"features/sec-zone/intro/#audits","title":"Audits","text":"<p>A set of users and groups can be authorized to view audit logs of access to zone\u2019s resources. Other users will not be allowed to view access-audit logs of resources of the zone.  </p>"},{"location":"getting-started/install/","title":"Installation","text":"<p>Tip</p> <p>If you don't have prior experience with Docker \ud83d\udc33, we recommend reading Docker Docs, which provides extensive documentation around how to get started with Docker.</p>"},{"location":"getting-started/install/#docker","title":"docker recommended","text":"<p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Open up a terminal and pull the image using:</p> Latest2.7 <pre><code>docker pull apache/ranger\ndocker pull apache/ranger-db\ndocker pull apache/ranger-solr\ndocker pull apache/ranger-zk\n</code></pre> <pre><code>docker pull apache/ranger:2.7.0\ndocker pull apache/ranger-db:2.7.0\ndocker pull apache/ranger-solr:2.7.0\ndocker pull apache/ranger-zk:2.7.0\n</code></pre> Warning <p>The Docker container is intended for development purposes only and is not suitable for production based deployment.</p>"},{"location":"getting-started/install/#docker-compose","title":"docker compose  for services","text":"<p>To bring up different data processing services (with Ranger plugin installed), <code>docker compose</code> is recommended.</p> <p>Follow instructions here to get started: Ranger Services with Docker Compose</p>"},{"location":"getting-started/trino-with-ranger/","title":"Trino with Ranger","text":""},{"location":"getting-started/trino-with-ranger/#introduction","title":"Introduction","text":"<p>This guide will walk you through the steps to run Trino with Apache Ranger as the Access Control Enforcer.</p>"},{"location":"getting-started/trino-with-ranger/#run-trino-container","title":"Run Trino Container","text":"Run Trino in Ranger's Network<pre><code>docker run -p 8080:8080 --name trino --network rangernw trinodb/trino\n\n# for more details: https://hub.docker.com/r/trinodb/trino\n</code></pre>"},{"location":"getting-started/trino-with-ranger/#configure-ranger-plugin-in-trino-container","title":"Configure Ranger Plugin in Trino Container","text":"Update access-control.properties in /etc/trino/ in Trino container<pre><code>access-control.name=ranger\nranger.service.name=dev_trino\nranger.plugin.config.resource=/etc/trino/ranger-trino-security.xml,/etc/trino/ranger-trino-audit.xml,/etc/trino/ranger-policymgr-ssl.xml\nranger.hadoop.config.resource=\n\n# For details to configure Apache Ranger: https://trino.io/docs/current/security/ranger-access-control.html\n</code></pre>"},{"location":"getting-started/trino-with-ranger/#restart-trino-container","title":"Restart Trino Container","text":""},{"location":"plugins/trino/","title":"Trino with Ranger","text":"<p>Ranger plugin for Trino uses Ranger policies to authorize data access to catalogs, schemas, tables, and columns in Trino. </p> <p>The plugin supports fine-grained features like  column-masking, row-filtering along with audit logging.</p> <p>For more details check: Ranger Access Control</p>"},{"location":"project/contributing/","title":"Contribute","text":""},{"location":"project/contributing/#contributing","title":"Contributing","text":"<p>In this page, you will find some guidelines on contributing to Apache Ranger.  </p> <p>If you are thinking of contributing but first would like to discuss the change you wish to make, we welcome you to raise a Jira Issue. You can also subscribe to the Dev List and join us on Slack  to connect with the community.  </p> <p>The Ranger Project is hosted on GitHub at https://github.com/apache/ranger.</p>"},{"location":"project/contributing/#pull-request-recommended","title":"Pull Request recommended","text":"<p>The Ranger community prefers to receive contributions as Github pull requests.</p> <p>View open pull requests</p> <p>When you are ready to submit your pull request, please keep the following in mind:</p> <ul> <li>PRs should be associated with a Jira Issue</li> <li>PRs should include a clear and descriptive title and summary of the change</li> <li>Please ensure that your code adheres to the existing coding style</li> <li>Please ensure that your code is well tested</li> <li>Please ensure that your code is well documented</li> </ul>"},{"location":"project/contributing/#review-board-legacy","title":"Review Board legacy","text":"<p>The Review Board may be used for Ranger code reviews as well.</p> <p>To submit a patch for review, please follow these steps:</p> <ul> <li>Create a Jira Issue for the change you wish to make. </li> <li>Create a patch file using <code>git format-patch</code> or <code>git diff &gt; my_patch.patch</code>. </li> <li>Upload the patch to Review Board and associate it with the Jira issue you created earlier. </li> <li>Request a review from the Ranger committers. </li> <li>Address any feedback you receive and update the patch as necessary. </li> <li>Once your patch has been approved, a committer will merge it into the main codebase. </li> <li>Close the associated Jira issue.</li> </ul>"},{"location":"project/cve-list/","title":"Vulnerabilities Found in Apache Ranger","text":""},{"location":"project/cve-list/#introduction","title":"Introduction","text":"<p>This page contains a list of security vulnerabilities that have been found in Apache Ranger. For each vulnerability, the following information is provided:</p>"},{"location":"project/cve-list/#fixed-in-ranger-260","title":"Fixed in Ranger 2.6.0","text":"CVE-2024-55532 Improper Neutralization of Formula Elements in a CSV File in Export to CSV feature of Apache Ranger Severity Low Vendor The Apache Software Foundation Versions Affected Apache Ranger versions prior to <code>2.6.0</code> Users affected All users of ranger policy admin tool Description Improper Neutralization issue in Export to CSV functionality Fix detail Added logic to properly sanitize the exported content Mitigation Users should upgrade to <code>2.6.0</code> or later version of Apache Ranger with the fix Credit \uae40\ub3c4\uade0 (a2256014@naver.com)"},{"location":"project/cve-list/#fixed-in-ranger-250","title":"Fixed in Ranger 2.5.0","text":"CVE-2024-45478 Stored XSS vulnerability in Edit Service Page of Apache Ranger UI Severity Moderate Vendor The Apache Software Foundation Versions Affected Apache Ranger versions prior to <code>2.5.0</code> Users affected All users of ranger policy admin tool UI Description Apache Ranger was found to be vulnerable to a Stored XSS issue in Edit Service functionality Fix detail Added logic to validate the user input Mitigation Users should upgrade to <code>2.5.0</code> or later version of Apache Ranger with the fix Credit Gyujin CVE-2024-45479 SSRF vulnerability in Edit Service Page of Apache Ranger UI Severity Moderate Vendor The Apache Software Foundation Versions Affected Apache Ranger versions prior to <code>2.5.0</code> Users affected All users of ranger policy admin tool UI Description Apache Ranger was found to be vulnerable to a SSRF issue in Edit Service functionality Fix detail Added logic to validate the user input Mitigation Users should upgrade to <code>2.5.0</code> or later version of Apache Ranger with the fix Credit Gyujin"},{"location":"project/cve-list/#fixed-in-ranger-200","title":"Fixed in Ranger 2.0.0","text":"CVE-2019-12397 Apache Ranger cross site scripting issue Vendor The Apache Software Foundation Versions Affected <code>0.7.0</code> to <code>1.2.0</code> versions of Apache Ranger, prior to <code>2.0.0</code> Users affected All users of ranger policy admin tool Description Apache Ranger was found to be vulnerable to a Cross-Site Scripting in policy import functionality Fix detail Added logic to sanitize the user input Mitigation Users should upgrade to <code>2.0.0</code> or later version of Apache Ranger with the fix Credit Jan Kaszycki from STM Solutions"},{"location":"project/cve-list/#fixed-in-ranger-120","title":"Fixed in Ranger 1.2.0","text":"CVE-2018-11778 Apache Ranger Stack based buffer overflow Severity Critical Vendor The Apache Software Foundation Versions Affected Apache Ranger versions prior to <code>1.2.0</code> Users affected Unix Authentication Service users Description Apache Ranger UnixAuthenticationService should properly handle user input to avoid Stack-based buffer overflow Fix detail UnixAuthenticationService was updated to correctly handle user input Mitigation Users should upgrade to <code>1.2.0</code> or later version of Apache Ranger with the fix Credit Alexander Klink"},{"location":"project/cve-list/#fixed-in-ranger-071","title":"Fixed in Ranger 0.7.1","text":"CVE-2017-7676 Apache Ranger policy evaluation ignores characters after \u2018*\u2019 wildcard character Severity Critical Vendor The Apache Software Foundation Versions Affected <code>0.6.x</code>/<code>0.7.0</code> versions of Apache Ranger Users affected Environments that use Ranger policies with characters after \\\u2018*\\\u2019 wildcard character \u2013 like my*test, test*.txt Description Policy resource matcher effectively ignores characters after \\\u2018*\\\u2019 wildcard character. This can result in affected policies to apply to resources where they should not be applied Fix detail Ranger policy resource matcher was updated to correctly handle wildcard matches. Mitigation Users should upgrade to <code>0.7.1</code> or later version of Apache Ranger with the fix CVE-2017-7677 Apache Ranger Hive Authorizer should check for RWX permission when external location is specified Severity Critical Vendor The Apache Software Foundation Versions Affected <code>0.5.x</code>/<code>0.6.x</code>/<code>0.7.0</code> versions of Apache Ranger Users affected Environments that use external location for hive tables Description Without Ranger Hive Authorizer checking RWX permission when external location is specified, there is a possibility that right permissions are not required to create the table Fix detail Ranger Hive Authorizer was updated to correctly handle permission check with external location Mitigation Users should upgrade to <code>0.7.1</code> or later version of Apache Ranger with the fix"},{"location":"project/cve-list/#fixed-in-ranger-063","title":"Fixed in Ranger 0.6.3","text":"CVE-2016-8746 Apache Ranger path matching issue in policy evaluation Severity Normal Vendor The Apache Software Foundation Versions Affected <code>0.6.0</code>/<code>0.6.1</code>/<code>0.6.2</code> versions of Apache Ranger Users affected All users of ranger policy admin tool Description Ranger policy engine incorrectly matches paths in certain conditions when policy does not contain wildcards and has recursion flag set to true Fix detail Fixed policy evaluation logic Mitigation Users should upgrade to <code>0.6.3</code> or later version of Apache Ranger with the fix CVE-2016-8751 Apache Ranger stored cross site scripting issue Severity Normal Vendor The Apache Software Foundation Versions Affected <code>0.5.x</code> and <code>0.6.0</code>/<code>0.6.1</code>/<code>0.6.2</code> versions of Apache Ranger Users affected All users of ranger policy admin tool Description Apache Ranger was found to be vulnerable to a Stored Cross-Site Scripting in when entering custom policy conditions. Admin users can store some arbitrary javascript code to be executed when normal users login and access policies Fix detail Added logic to sanitize the user input Mitigation Users should upgrade to <code>0.6.3</code> or later version of Apache Ranger with the fix"},{"location":"project/cve-list/#fixed-in-ranger-062","title":"Fixed in Ranger 0.6.2","text":"CVE-2016-6815 Apache Ranger user privilege vulnerability Severity Normal Vendor The Apache Software Foundation Versions Affected All <code>0.5.x</code> versions or <code>0.6.0</code>/<code>0.6.1</code> versions of Apache Ranger Users affected All users of ranger policy admin tool Description Users with \"keyadmin\" role should not be allowed to change password for users with <code>admin</code> role Fix detail Added logic to validate the user privilege in the backend Mitigation Users should upgrade to <code>0.6.2</code> or later version of Apache Ranger with the fix"},{"location":"project/cve-list/#fixed-in-ranger-061","title":"Fixed in Ranger 0.6.1","text":"CVE-2016-5395 Apache Ranger Stored Cross Site Scripting vulnerability Severity Normal Vendor The Apache Software Foundation Versions Affected All <code>0.5.x</code> versions of Apache Ranger and version <code>0.6.0</code> Users affected All users of ranger policy admin tool Description Apache Ranger was found to be vulnerable to a Stored Cross-Site Scripting in the create user functionality. Admin users can store some arbitrary javascript code to be executed when normal users login and access policies Fix detail Added logic to sanitize the user input Mitigation Users should upgrade to <code>0.6.1</code> or later version of Apache Ranger with the fix Credit Thanks to Victor Hora from Securus Global for reporting this issue"},{"location":"project/cve-list/#fixed-in-ranger-053","title":"Fixed in Ranger 0.5.3","text":"CVE-2016-2174 Apache Ranger sql injection vulnerability Severity Normal Vendor The Apache Software Foundation Versions Affected All versions of Apache Ranger from <code>0.5.0</code> (up to <code>0.5.3</code>) Users affected All admin users of ranger policy admin tool Description SQL Injection vulnerability in Audit &gt; Access tab. When the user clicks an element from <code>policyId</code> row of the list, there is a call made underneath with eventTime parameter which contains the vulnerability. Admin users can send some arbitrary sql code to be executed along with eventTime parameter using <code>/service/plugins/policies/eventTime url</code> Fix detail Replaced native queries with JPA named queries Mitigation Users should upgrade to <code>0.5.3</code> version of Apache Ranger with the fix Credit Thanks to Mateusz Olejarka from SecuRing for reporting this issue"},{"location":"project/cve-list/#fixed-in-ranger-051","title":"Fixed in Ranger 0.5.1","text":"CVE-2015-5167 Restrict REST API data access for non-admin users Severity Important Vendor The Apache Software Foundation Versions Affected <code>0.4.0</code> and <code>0.5.0</code> version of Apache Ranger Users affected All users of ranger policy admin tool Description Data access restrictions via REST API are not consistent with restrictions in policy admin UI Mitigation Users should upgrade to Ranger <code>0.5.1</code> version CVE-2016-0733 Ranger Admin authentication issue Severity Important Vendor The Apache Software Foundation Versions Affected <code>0.4.0</code> and <code>0.5.0</code> version of Apache Ranger Users affected All users of ranger policy admin tool Description Malicious Users can gain access to ranger admin UI without proper authentication Mitigation Users should upgrade to Ranger <code>0.5.1</code> version"},{"location":"project/cve-list/#fixed-in-ranger-050","title":"Fixed in Ranger 0.5.0","text":"CVE-2015-0265 Apache Ranger code injection vulnerability Severity Important Vendor The Apache Software Foundation Versions Affected <code>0.4.0</code> version of Apache Ranger Users affected All admin users of ranger policy admin tool Description Unauthorized users can send some javascript code to be executed in ranger policy admin tool admin sessions Fix detail Added logic to sanitize the user input Mitigation Users should upgrade to <code>0.5.0+</code> version of Apache Ranger with the fix Credit Thanks to Jakub Ka\u0142u\u017cny from SecuRing for reporting this issue CVE-2015-0266 Apache Ranger direct url access vulnerability Severity Important Vendor The Apache Software Foundation Versions Affected <code>0.4.0</code> version of Apache Ranger Users affected All users of ranger policy admin tool Description Regular users can type in the URL of modules that are accessible only to admin users Fix detail Added logic in the backend to verify user access Mitigation Users should upgrade to <code>0.5.0+</code> version of Apache Ranger with the fix Credit Thanks to Jakub Ka\u0142u\u017cny from SecuRing for reporting this issue"},{"location":"project/java-code-style/","title":"Java Style Guide","text":""},{"location":"project/java-code-style/#java-code-style-guide","title":"Java Code Style Guide","text":"<p>Every major open-source project has its own style guide: a set of conventions (sometimes arbitrary) about how to write code for that project. It is much easier to understand a large codebase when all the code in it is in a consistent style.</p> <p>\"Style\" covers a lot of ground, from \"use camelCase for variable names\" to \"never use global variables\" to \"never use exceptions\".</p> <p>Ranger also contains checkstyle rules in dev-support/checkstyle.xml, and a maven plugin associated with it - <code>maven-checkstyle-plugin</code> to assist with style guide compliance. There are other code style guidelines which the rules do not capture but are recommended to follow. Below is a list of rules which were followed as part of implementing RANGER-5017.</p>"},{"location":"project/java-code-style/#source-file-structure","title":"Source File Structure","text":"<p>A source file consists of, in order:</p> <ul> <li>Apache License </li> <li>Package statement </li> <li>Import statements </li> <li>Exactly one top-level class</li> </ul> <p>Exactly one blank line separates each section that is present.</p>"},{"location":"project/java-code-style/#import-statements","title":"Import Statements","text":""},{"location":"project/java-code-style/#no-wildcard-imports","title":"No wildcard imports","text":"<p>Wildcard imports, static or otherwise, are not used.</p>"},{"location":"project/java-code-style/#no-line-wrapping","title":"No line-wrapping","text":"<p>Import statements are not line-wrapped.</p>"},{"location":"project/java-code-style/#ordering-and-spacing","title":"Ordering and Spacing","text":"<p>Imports are ordered as follows:</p> <ul> <li>All non-static imports in a single block. </li> <li>All static imports in a single block.</li> </ul> <p>If there are both static and non-static imports, a single blank line separates the two blocks. There are no other blank lines between import statements.</p> <p>Within each block the imported names appear in ASCII sort order.</p>"},{"location":"project/java-code-style/#class-declaration","title":"Class Declaration","text":""},{"location":"project/java-code-style/#exactly-one-top-level-class-declaration","title":"Exactly one top-level class declaration","text":"<p>Each top-level class resides in a source file of its own.</p>"},{"location":"project/java-code-style/#ordering-of-class-contents","title":"Ordering of class contents","text":"<ul> <li>Loggers if present are always at the top. </li> <li>Static members are in a single block followed by non-static members. </li> <li>Final members come before non-final members. </li> <li>The order of access modifiers is: <code>public protected private default</code></li> </ul>"},{"location":"project/java-code-style/#formatting","title":"Formatting","text":""},{"location":"project/java-code-style/#use-of-braces","title":"Use of Braces","text":"<p>Braces are used with <code>if, else, for, do</code> and <code>while</code> statements, even when the body is empty or contains only a single statement.</p>"},{"location":"project/java-code-style/#nonempty-blocks-k-r-style","title":"Nonempty blocks: K &amp; R style","text":"<p>Braces follow the <code>Kernighan and Ritchie</code> style (Egyptian brackets) for nonempty blocks and block-like constructs:</p> <ul> <li>No line break before the opening brace, except as detailed below. </li> <li>Line break after the opening brace. </li> <li>No empty line after the opening brace. </li> <li>Line break before the closing brace. </li> <li>Line break after the closing brace, only if that brace terminates a statement or terminates the body of a method, constructor, or named class. For example, there is no line break after the brace if it is followed by <code>else</code> or a comma.</li> </ul>"},{"location":"project/java-code-style/#column-limit-set-to-512","title":"Column Limit: Set to 512","text":""},{"location":"project/java-code-style/#whitespace","title":"Whitespace","text":""},{"location":"project/java-code-style/#vertical-whitespace","title":"Vertical Whitespace","text":"<p>A single blank line may also appear anywhere it improves readability, for example between statements to organize the code into logical subsections.</p> <p>Multiple consecutive blank lines are NOT permitted.</p>"},{"location":"project/java-code-style/#horizontal-alignment-recommended-not-enforced","title":"Horizontal Alignment: Recommended (not enforced)","text":"Horizontal Alignment<pre><code>private int x = 5; // this is fine\nprivate String color = blue; // this too\n\nprivate int        x = 5;       // permitted, but future edits\nprivate String color = \"blue\";  // may leave it unaligned\n</code></pre>"},{"location":"project/java-code-style/#naming","title":"Naming","text":""},{"location":"project/java-code-style/#package-names","title":"Package Names","text":"<p>Package names use only lowercase letters and digits (no underscores). Consecutive words are simply concatenated together. For example: org.apache.ranger.rangerdb, not org.apache.ranger.rangerDb or org.apache.ranger.ranger_db</p>"},{"location":"project/java-code-style/#class-names","title":"Class Names","text":"<p>Class names are written in UpperCamelCase.</p>"},{"location":"project/java-code-style/#method-names","title":"Method Names","text":"<p>Method names are written in lowerCamelCase.</p>"},{"location":"project/java-code-style/#constant-names","title":"Constant Names","text":"<p>Constant names use UPPER_SNAKE_CASE : all uppercase letters, with each word separated from the next by a single underscore.</p>"},{"location":"project/java-code-style/#programming-practices","title":"Programming Practices","text":""},{"location":"project/java-code-style/#string-concatenation","title":"String Concatenation","text":"<p>NOT allowed in log statements.</p> <p>Exceptions: allowed in <code>Exception/System.out.println</code> statements. for ex:</p> <pre><code>// allowed\nLOG.debug(\"revokeAccess as user {}\", user);\nLOG.error(\"Failed to get response, Error is : {}\", e.getMessage());\n// not allowed\nLOG.debug(\"revokeAccess as user \" + user);\nLOG.error(\"Failed to get response, Error is : \" + e.getMessage());\n// allowed\nthrow new Exception(\"HTTP \" + response.getStatus() + \" Error: \" + resp.getMessage());\n// allowed\nSystem.out.println(\"Unknown callback [\" + cb.getClass().getName() + \"]\");\n</code></pre>"},{"location":"project/java-code-style/#loggerisdebugenabled","title":"logger.isDebugEnabled()","text":"<p>logger.debug statements may be preceded by isDebugEnabled() only if debug statements involve heavy operations, for ex:</p> <pre><code>if (LOG.isDebugEnabled()) {\n    LOG.debug(\"User found from principal [{}] =&gt; user:[{}], groups:[{}]\", user.getName(), userName, StringUtil.toString(groups));\n}\n</code></pre>"},{"location":"project/java-code-style/#use-intellij-suggestions-highly-recommended","title":"Use IntelliJ suggestions - highly recommended","text":""},{"location":"project/release-process/","title":"Ranger Release Guidelines","text":""},{"location":"project/release-process/#introduction","title":"Introduction","text":"<p>This page walks you through the release process of the Ranger project. Here you can read about the release process in general for an Apache project.</p> <p>Decisions about releases are made by three groups:</p> <ul> <li>Release Manager: Does the work of creating the release, signing it, counting votes, announcing the release and so on.</li> <li>The Community: Performs the discussion of whether it is the right time to create a release and what that release should contain. The community can also cast non-binding votes on the release.</li> <li>PMC: Gives binding votes on the release.</li> </ul> <p>This page describes the procedures that the release manager and voting PMC members take during the release process.</p>"},{"location":"project/release-process/#prerequisite","title":"Prerequisite","text":"<p>The release manager should have a gpg key setup to sign the artifacts. For more details, please see</p>"},{"location":"project/release-process/#setup-for-first-time-release-managers","title":"Setup for first time release managers","text":"Generate OpenPPG Key<pre><code># create a key\ngpg --gen-key\n\n# If you have multiple keys present, select the key id you want to use, let's say it is - your_gpg_key_id then do:\nexport CODESIGNINGKEY=your_gpg_key_id\n\ngpg --list-keys ${CODESIGNINGKEY}\n\n# to upload the key to a key server\ngpg --keyserver hkp://keyserver.ubuntu.com --send-key ${CODESIGNINGKEY}\n</code></pre>"},{"location":"project/release-process/#publish-your-key","title":"Publish your key","text":"<p>The key is supposed to be published together with the release. If it doesn't exist already, append it to the end of keys file.</p> Publish Key (PMC)<pre><code>svn co https://dist.apache.org/repos/dist/release/ranger\ncd ranger\ngpg --list-sigs $CODESIGNINGKEY &gt;&gt; KEYS\ngpg --armor --export $CODESIGNINGKEY &gt;&gt; KEYS\n\nsvn commit -m \"Adding key of XXXX to the KEYS\" \n</code></pre> <p>Note</p> <p>In case you are a Committer and not a PMC member, you can add your key to the dev <code>KEYS</code> file and a PMC member can move it to the final destination.</p> Publish Key (Committer)<pre><code>svn co https://dist.apache.org/repos/dist/dev/ranger\ncd ranger\ngpg --list-sigs $CODESIGNINGKEY &gt;&gt; KEYS\ngpg --armor --export $CODESIGNINGKEY &gt;&gt; KEYS\nsvn commit -m \"Adding key of XXXX to the KEYS\"\n</code></pre>"},{"location":"project/release-process/#pre-vote","title":"Pre-Vote","text":""},{"location":"project/release-process/#create-a-parent-jira-for-the-release","title":"Create a parent Jira for the release","text":"<p>This provides visibility into the progress of the release for the community. Tasks mentioned in this guide like changing snapshot versions, updating the Ranger website, publishing the artifacts, publishing the docker image, etc can be added as subtasks. Here is an example: RANGER-5098</p>"},{"location":"project/release-process/#notify-the-community-in-advance-of-the-release","title":"Notify the community in advance of the release","text":"<p>The below details should be included when sending out an email to: <code>dev@ranger.apache.org</code></p> <ul> <li>The release branch to be used for the release.</li> <li>The release branch lockdown date, the branch will be closed for commits after this date. Commits after this date will require approval from PMC Members.</li> <li>Tentative date for the availability of release-candidate #0, after which voting begins. A minimum of 72 hours needs to pass before the voting can close.</li> <li>Tentative release date.</li> </ul>"},{"location":"project/release-process/#branching","title":"Branching","text":"<p>A release branch should already be available as a post-release activity from the previous release. All release related changes will go to this branch until the release is complete.</p> <ul> <li>Ensure that there is no <code>OPEN</code> Jira associated with the release.</li> </ul>"},{"location":"project/release-process/#update-the-versions","title":"Update the versions","text":"Update Versions<pre><code># Use below command or use IDE to replace \"${RANGER_VERSION}-SNAPSHOT\" with \"${RANGER_VERSION}\".\nexport RANGER_VERSION=\"2.7.0\"\n\nmvn versions:set -DnewVersion=${RANGER_VERSION} -DgenerateBackupPoms=false\n\n# Also, manually update versions in:\n# - dev-support/ranger-docker/.env\n# - docs/pom.xml\n# - unixauthnative/pom.xml\n# - ranger-trino-plugin-shim/pom.xml\n</code></pre>"},{"location":"project/release-process/#commit-the-changes","title":"Commit the changes","text":"<p>Commit version changes to release branch<pre><code>export RANGER_VERSION=\"2.7.0\" # Set to the version of Ranger being released.\n\ngit commit -am \"RANGER-XXXX: Updated version from ${RANGER_VERSION}-SNAPSHOT to ${RANGER_VERSION}\"\n\ngit push origin\n\n# for ex: https://github.com/apache/ranger/commit/81f3d2f\n</code></pre> Tag the RC and Push<pre><code>git tag -a release-${RANGER_VERSION}-rc${RANGER_RC} -m \"Ranger ${RANGER_VERSION}-rc${RANGER_RC} release\"\n\n# example: git tag -a release-2.6.0-rc0 -m \"Ranger 2.6.0-rc0 release\"\n\n# and then push to the release branch like this\ngit push origin release-${RANGER_VERSION}-rc${RANGER_RC}\n</code></pre></p>"},{"location":"project/release-process/#build-and-publish-source-artifacts","title":"Build and Publish Source Artifacts","text":""},{"location":"project/release-process/#set-up-local-environment","title":"Set up local environment","text":"<p>It is probably best to clone a fresh Ranger repository locally to work on the release, and leave your existing repository intact for dev tasks you may be working on simultaneously. After cloning, make sure the apache/ranger upstream repo is named origin. This is required for release build metadata to be correctly populated. Assume all following commands are executed from within this repo with your release branch checked out.</p> <pre><code>export RANGER_RC=0 # Set to the number of the current release candidate, starting at 0.\nexport CODESIGNINGKEY=your_gpg_key_id\n</code></pre>"},{"location":"project/release-process/#reset-the-git-repository","title":"Reset the git repository","text":"Reset the git repo<pre><code>git reset --hard\ngit clean -dfx\n</code></pre>"},{"location":"project/release-process/#create-the-release-artifacts","title":"Create the release artifacts","text":"Build Ranger<pre><code># run with unit tests\nmvn clean install -Dmaven.javadoc.skip=true\n</code></pre> <ul> <li>Verify <code>LICENSE</code> and <code>NOTICE</code> files for the release are updated based on changes in the release.</li> <li>Go through all commits in this particular release and create Release Notes. for example: Apache Ranger 2.6.0 - Release Notes</li> <li>Also, ensure the fix versions are appropriately added for all the jiras related to the commits.</li> </ul>"},{"location":"project/release-process/#calculate-the-checksum-and-sign-the-artifacts","title":"Calculate the checksum and sign the artifacts","text":"Sign and checksum the artifacts<pre><code>export GPG_TTY=$(tty)\nant -f release-build.xml -Dranger-release-version=${RANGER_VERSION} -Dsigning-key=${CODESIGNINGKEY}\n\n# on successful run, the above command generates 4 files in target:\n# - apache-ranger-${RANGER_VERSION}.tar.gz\n# - apache-ranger-${RANGER_VERSION}.tar.gz.asc\n# - apache-ranger-${RANGER_VERSION}.tar.gz.sha512\n# - apache-ranger-${RANGER_VERSION}.tar.gz.sha256\n\n# verify the signed tarball and checksum file using below command\ncd target\ngpg --verify apache-ranger-${RANGER_VERSION}.tar.gz.asc apache-ranger-${RANGER_VERSION}.tar.gz\nsha512sum -c apache-ranger-${RANGER_VERSION}.tar.gz.sha512\nsha256sum -c apache-ranger-${RANGER_VERSION}.tar.gz.sha256\n</code></pre>"},{"location":"project/release-process/#publish-source-artifacts-to-dev","title":"Publish source artifacts to dev","text":"publish dev artifacts<pre><code>svn co https://dist.apache.org/repos/dist/dev/ranger ranger-dev\n\nmkdir ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}\n\ncp target/apache-ranger-${RANGER_VERSION}.tar.gz ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}/\ncp target/apache-ranger-${RANGER_VERSION}.tar.gz.asc ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}/\ncp target/apache-ranger-${RANGER_VERSION}.tar.gz.sha256 ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}/\ncp target/apache-ranger-${RANGER_VERSION}.tar.gz.sha512 ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}/\n\nsvn add ${RANGER_VERSION}-rc${RANGER_RC}\nsvn commit -m \"RANGER-XXXX: Upload ${RANGER_VERSION}-rc${RANGER_RC}\" # requires ASF authentication\n</code></pre>"},{"location":"project/release-process/#vote","title":"Vote","text":""},{"location":"project/release-process/#send-the-voting-email-as-described-below","title":"Send the voting email as described below","text":"<ul> <li>Send release voting request with the subject line  <pre><code>[VOTE] Release Apache Ranger ${RANGER_VERSION} ${RANGER_RC}\n</code></pre> to <code>dev@ranger.apache.org</code> and <code>private@ranger.apache.org</code></li> <li>Include the following in the email:<ul> <li>Link to a Jira query showing all resolved issues for this release. Something like this. </li> <li>Link to the release candidate tag on GitHub. </li> <li>Location of the source and binary tarballs. This link will look something like https://dist.apache.org/repos/dist/dev/ranger/2.6.0-rc0/</li> <li>Link to the public key used to sign the artifacts. This should always be in the keys file.</li> </ul> </li> <li> <p>The vote will be open for at least 72 hours or until necessary votes are reached.</p> <pre><code>[] +1 approve\n[] +0 no opinion\n[] -1 disapprove (and reason why)\n</code></pre> </li> <li> <p>Review release-policy for the ASF wide release voting policy.</p> </li> </ul> <p>Note</p> <p>Note what is required of binding voters, and that binding votes can only come from PMC members. Check https://people.apache.org/committer-index.html, users whose group membership includes <code>ranger-pmc</code> can cast binding votes.</p> <ul> <li>If VOTE did not go through:<ul> <li>Apply fixes to the release branch and repeat the steps starting from tagging the commit for the release candidate with the $RANGER_RC variable incremented by 1 for all steps.</li> </ul> </li> <li>Once voting is finished, send an email summarizing the results with subject <pre><code>[RESULT] [VOTE] Apache Ranger ${RANGER_VERSION} ${RANGER_RC}\n</code></pre> to <code>dev@ranger.apache.org</code> and <code>private@ranger.apache.org</code>. Include names of all PMC members, followed by committers/contributors who cast their votes. Here is a reference link.</li> </ul>"},{"location":"project/release-process/#post-vote","title":"Post-Vote","text":""},{"location":"project/release-process/#publish-the-source-artifacts-to-distapacheorg","title":"Publish the source artifacts to dist.apache.org","text":"<p>You should commit the artifacts to the SVN repository. If you are not a PMC member you can commit it to the dev ranger first and ask a PMC member for the final move. PMC members can move it to the final location:  </p> <p>Move<pre><code>svn co https://dist.apache.org/repos/dist/dev/ranger ranger-dev &amp;&amp; cd ranger-dev\n\nsvn co https://dist.apache.org/repos/dist/release/ranger ranger-release &amp;&amp; cd ranger-release\n\nmkdir ranger-release/${RANGER_VERSION}\n\ncp ranger-dev/${RANGER_VERSION}-rc${RANGER_RC}/* ranger-release/${RANGER_VERSION} # copy release artifacts from dev to release\n\ncd ranger-release\n\nsvn add ${RANGER_VERSION}\n\nsvn commit -m \"Uploading Apache Ranger ${RANGER_VERSION} release src artifacts\" ${RANGER_VERSION}\n</code></pre> Now the <code>.tar.gz</code> artifact should have an associated <code>.asc</code> file, <code>.sha512</code> and <code>.sha256</code> file at the destination, so a total of 4 files.</p>"},{"location":"project/release-process/#publish-the-source-artifacts-to-maven-central","title":"Publish the source artifacts to Maven Central","text":"<ol> <li>Setup <code>~/.m2/settings-security.xml</code> as per the guidelines.</li> <li>Encrypt your Apache account password using above guidelines, and enter it in <code>~/.m2/settings.xml</code> in the following entry     Update settings.xml<pre><code>&lt;server&gt;\n    &lt;id&gt;apache.staging.https&lt;/id&gt;\n    &lt;username&gt;username&lt;/username&gt;\n    &lt;password&gt;encrypted_password&lt;/password&gt;\n&lt;/server&gt;\n</code></pre></li> <li>Run the following:     checkout and deploy<pre><code># checkout the relevant git tag\n\ngit checkout release-ranger-${RANGER_VERSION}\n# eg: git checkout release-ranger-2.6.0\n\n# deploy the release\nmvn clean deploy -Papache-release -DskipTests -DskipDocs\n</code></pre></li> <li>Go to https://repository.apache.org/ and log in using your Apache account.</li> <li>Click on <code>Staging Repositories</code> on the left-hand side.</li> <li>Select the entry that starts with orgapacheranger and click on <code>close</code>.</li> <li>Verify via the URL that should appear after refresh that the artifacts look as expected.</li> <li>After approval, click on <code>release</code>.</li> </ol>"},{"location":"project/release-process/#publish-build-artifacts","title":"Publish build artifacts","text":"build ranger release and push artifacts to svn<pre><code># build ranger from the release branch\n\n# create parent directory before build\nRELEASE_DIR=/tmp/release-${RANGER_VERSION}\nmkdir -p ${RELEASE_DIR} &amp;&amp; cd ${RELEASE_DIR}\n\ngit clone https://github.com/apache/ranger.git &amp;&amp; cd ranger\n\ngit checkout release-ranger-${RANGER_VERSION}\n\n# after successful build, artifacts should be present in target\nmvn clean package -DskipTests\n\n# checkout svn repo\ncd ~\nsvn co https://dist.apache.org/repos/dist/dev/ranger ranger-dev &amp;&amp; cd ranger-dev\ncd ${RANGER_VERSION}-rc${RANGER_RC}\ncp ${RELEASE_DIR}/ranger/target/ranger-* .\n\n# generate signature and checksums for all\nfor file in `find . -name \"ranger-*\"`\ndo\n  gpg --armor --output ${file}.asc --detach-sig ${file} &amp;&amp; sha512sum ${file} &gt; ${file}.sha512\ndone\n\nsvn add ranger-*\nsvn commit -m \"upload build artifacts for ${RANGER_RELEASE} release\"\n\n# PMC Members may selectively move these artifacts to https://dist.apache.org/repos/dist/release/ranger/${RANGER_RELEASE} under respective directories\n</code></pre>"},{"location":"project/release-process/#add-the-final-git-tag-and-push-it","title":"Add the final git tag and push it","text":"Add final release tag<pre><code>git checkout \"release-${RANGER_VERSION}-rc${RANGER_RC}\"\n\ngit tag -a \"release-ranger-${RANGER_VERSION}\" -m \"Apache Ranger $RANGER_VERSION\"\n\ngit push origin \"release-ranger-${RANGER_VERSION}\"\n</code></pre>"},{"location":"project/release-process/#create-a-sub-page-in-confluence","title":"Create a sub-page in Confluence","text":"<p>Add a sub-page under Release Folders for this release and add links for the following:</p> <ul> <li>Link to the release notes</li> <li>Link to the release artifacts</li> <li>Link to the release tag</li> </ul> <p>Something like this.</p>"},{"location":"project/release-process/#update-the-ranger-website","title":"Update the Ranger website","text":"<ul> <li>Create a PR targeted for master branch to update the docs with the new release.</li> <li>Update the ranger website with the release artifacts (use master branch to do this!) and push the changes in the master branch.</li> </ul>"},{"location":"project/release-process/#publish-docker-images-for-the-release","title":"Publish docker images for the release","text":"<p>Build the following docker images:  </p> <ul> <li>ranger </li> <li>ranger-db</li> <li>ranger-solr</li> <li>ranger-zk</li> </ul> <p>with the release checked out and upload them to DockerHub. Instructions to build the images can be found here. tag and push docker images<pre><code># tag the images\ndocker tag ranger:latest apache/ranger:${RANGER_VERSION}\ndocker tag ranger-db:latest apache/ranger-db:${RANGER_VERSION}\ndocker tag ranger-solr:latest apache/ranger-solr:${RANGER_VERSION}\ndocker tag ranger-zk:latest apache/ranger-zk:${RANGER_VERSION}\n\n# do docker login\ndocker login\n\n# push the images\ndocker push apache/ranger:${RANGER_VERSION}\ndocker push apache/ranger-db:${RANGER_VERSION}\ndocker push apache/ranger-solr:${RANGER_VERSION}\ndocker push apache/ranger-zk:${RANGER_VERSION}\n</code></pre></p>"},{"location":"project/release-process/#send-an-announcement-mail","title":"Send an announcement mail","text":"<p>to <code>dev@ranger.apache.org</code>, <code>user@ranger.apache.org</code>, <code>announce@apache.org</code>. Something like this.</p> <pre><code>Subject: [ANNOUNCE] Apache Ranger ${RANGER_VERSION}\n</code></pre> <p>Note</p> <p>Only PMC members can send the email to <code>announce@apache.org</code></p> <ul> <li>Include the following in the email:<ul> <li>Download link</li> <li>Release notes: example - Apache Ranger 2.6.0 - Release Notes </li> <li>When downloading binaries from the site, please remember to verify the downloads using signatures at: KEYS</li> </ul> </li> </ul>"},{"location":"project/release-process/#branching_1","title":"Branching","text":"<p>Create a new release branch, for ex: ranger-2.7 from ranger-2.6. In this release branch, do the following and commit it. Update to SNAPSHOT version and Push<pre><code>NEXT_RANGER_VERSION=2.7.0-SNAPSHOT\nmvn versions:set -DnewVersion=${NEXT_RANGER_VERSION}\n\ngit commit -am \"RANGER-XXXX: Updated version from ${RANGER_VERSION} to ${NEXT_RANGER_VERSION}\"\n\n# Also, manually update versions in:\n# - dev-support/ranger-docker/.env\n# - docs/pom.xml\n\ngit push origin\n</code></pre> Now, update the previous release branch with newer SNAPSHOT version and commit it, something like this:</p> Update to SNAPSHOT version and Push<pre><code>NEXT_RANGER_VERSION=\"2.6.1-SNAPSHOT\"\nmvn versions:set -DnewVersion=${NEXT_RANGER_VERSION}\n\ngit commit -am \"RANGER-XXXX: Updated version from ${RANGER_VERSION} to ${NEXT_RANGER_VERSION}\"\n\n# Also, manually update versions in:\n# - dev-support/ranger-docker/.env\n# - docs/pom.xml\n\ngit push origin\n</code></pre>"},{"location":"project/release-process/#other-tasks","title":"Other Tasks","text":"<ul> <li>In Apache JIRA admin, mark the release as complete and create a next version for tracking the changes to the next (major|minor) version</li> <li>Update release data in https://reporter.apache.org/?ranger</li> </ul> <p>Note</p> <p>Only PMC members can do this step.</p> <ul> <li>If the release resolved any CVE <ul> <li>update Vulnerabilities Found</li> <li>send notification to <ul> <li><code>security@apache.org</code></li> <li><code>oss-security@lists.openwall.com</code></li> <li><code>dev@ranger.apache.org</code></li> <li><code>user@ranger.apache.org</code></li> <li><code>private@ranger.apache.org</code></li> </ul> </li> <li>Follow https://www.apache.org/security/committers.html for publishing the CVE</li> </ul> </li> </ul>"},{"location":"release-notes/","title":"Ranger Releases","text":""},{"location":"release-notes/#apache-ranger-releases","title":"Apache Ranger Releases","text":""},{"location":"release-notes/#280","title":"2.8.0","text":"<p>To be released soon</p>"},{"location":"release-notes/#270","title":"2.7.0","text":"<p>Released July 30, 2025</p> GitHub Release DockerHub Release <code>2.7.0</code> <code>2.7.0</code>"},{"location":"release-notes/#260","title":"2.6.0","text":"<p>Released February 15, 2025</p> GitHub Release DockerHub Release <code>2.6.0</code> <code>2.6.0</code>"},{"location":"release-notes/#250","title":"2.5.0","text":"<p>Released August 9, 2024</p> GitHub Release DockerHub Release <code>2.5.0</code> <code>2.5.0</code>"},{"location":"release-notes/2.6.0/","title":"Ranger 2.6.0 Release Notes","text":""},{"location":"release-notes/2.6.0/#ranger-260-release-notes","title":"Ranger 2.6.0 Release Notes","text":"<p>Released February 15, 2025</p> <p>The release is certified with these versions of the various components:</p> <ul> <li>Java: <code>8</code></li> <li>Python3: <code>3.10.12</code></li> <li>Databases [Ranger and Ranger KMS]:<ul> <li>MariaDB: <code>10.7.3</code></li> <li>Postgres: <code>12</code></li> <li>Oracle: <code>23.6</code></li> </ul> </li> <li>Apache Solr: <code>8.11.3</code></li> </ul>"},{"location":"release-notes/2.6.0/#release-highlights","title":"Release Highlights","text":"<p>RANGER-4936: New Feature to import and export individual policies  </p>"},{"location":"release-notes/2.6.0/#key-updates","title":"Key Updates","text":"<ul> <li>Critical performance improvements in policy evaluation:</li> <li>RANGER-4893: Enhance trie to support process of evaluators during traversal  </li> <li>RANGER-4990: Rationalize processing of match-types for policy and tag evaluation  </li> <li>HBase plugin performance improvements</li> <li>utility to migrate admin audits from <code>x_trx_log</code> table to <code>x_trx_log_v2</code> table</li> <li>custom condition to support validity schedules in policy items</li> <li>UI update to replace <code>Bootbox.js</code> with <code>Bootprompt.js</code></li> <li>updated use of <code>UserGroupInformation.doAs()</code> to support Kerberos in Trino plugin (JDK23)</li> </ul>"},{"location":"release-notes/2.6.0/#key-fixes","title":"Key Fixes","text":"<ul> <li>tagsync fixes to support Ozone resources</li> <li>fixed issues in support for Oracle database</li> </ul>"},{"location":"release-notes/2.7.0/","title":"Ranger 2.7.0 Release Notes","text":""},{"location":"release-notes/2.7.0/#ranger-270-release-notes","title":"Ranger 2.7.0 Release Notes","text":"<p>Released July 30, 2025</p> <p>The release is certified with these versions of the various components:</p> <ul> <li>Java  <code>8</code></li> <li>Python  <code>3.10.12</code> </li> <li>Databases [Ranger and Ranger KMS]:<ul> <li>MariaDB :fontawesome-simple-mariadb: <code>10.7.3</code> </li> <li>Postgres: <code>12</code> </li> <li>Oracle: <code>23.6</code></li> </ul> </li> <li>Apache Solr: <code>8.11.3</code></li> </ul>"},{"location":"release-notes/2.7.0/#release-highlights","title":"Release Highlights","text":""},{"location":"release-notes/2.7.0/#key-updates","title":"Key Updates","text":"<p>RANGER-5208: Refactor audit module to move each destination implementation to a separate module RANGER-5113: DELETE multiple policies with a wildcard via API call RANGER-5102: Add config param for writing audits to HDFS in append mode RANGER-5241 RANGER-5166 RANGER-5167 RANGER-5158: Docker Setup Improvements  </p>"},{"location":"release-notes/2.7.0/#key-fixes","title":"Key Fixes","text":"<p>RANGER-5202: Tag deny policy is not getting enforced on scan table command for hbase RANGER-5224: dedupTags removes the valid tags while deduplicating tags RANGER-5154: Fix failure in deleting records from x_auth_sess table</p>"},{"location":"release-notes/2.7.0/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Library <code>ranger-plugins-audit</code> is not available starting with Apache Ranger <code>2.7.0</code> release. Contents of this library are split into multiple libraries, one for each audit destination. This enables plugin implementations to minimize dependencies by including libraries only for the destinations they need. Plugin implementations should replace references to ranger-plugins-audit with audit destination specific library's listed below:<ul> <li>ranger-audit-dest-cloudwatch </li> <li>ranger-audit-dest-es </li> <li>ranger-audit-dest-hdfs </li> <li>ranger-audit-dest-kafka</li> <li>ranger-audit-dest-log4j </li> <li>ranger-audit-dest-solr </li> </ul> </li> <li>Authorization plugin packages in Apache Ranger <code>2.7.0</code> include dependent libraries for two audit destinations only \u2013 <code>Solr</code> and <code>HDFS</code>. In earlier versions of Apache Ranger, plugin packages included libraries for all available audit destinations, like <code>AWS CloudWatch</code>, <code>Elasticsearch</code>, <code>Kafka</code>, <code>Log4j</code>. If support for other audit destinations is needed, it will be necessary to rebuild the plugin package after updating pom and packaging files of the plugin.</li> </ul>"},{"location":"services/admin/service/","title":"Ranger Admin","text":""},{"location":"services/kms/service/","title":"Ranger KMS","text":""},{"location":"services/tagsync/service/","title":"Ranger TagSync","text":""},{"location":"services/usersync/service/","title":"Ranger UserSync","text":""}]}